{
	"name": "df_trasform_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_rw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "casesdeathssource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countrylookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_process_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "casesandDeathSink"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeonly"
				},
				{
					"name": "select1"
				},
				{
					"name": "pivotcounts"
				},
				{
					"name": "lookupcountry"
				},
				{
					"name": "selectsink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> casesdeathssource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrylookup",
				"casesdeathssource filter(continent == 'Europe' && not(isNull(country_code))) ~> filterEuropeonly",
				"filterEuropeonly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported'+'_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          country_special = country+country_code),",
				"     pivotBy(indicator, ['confirmed_cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotcounts",
				"pivotcounts, countrylookup lookup(pivotcounts@country == countrylookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupcountry",
				"lookupcountry select(mapColumn(",
				"          country = pivotcounts@country,",
				"          population = pivotcounts@population,",
				"          source,",
				"          reported_date,",
				"          country_special,",
				"          countconfirmed_cases,",
				"          countdeaths,",
				"          country = countrylookup@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population = countrylookup@population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsink",
				"selectsink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> casesandDeathSink"
			]
		}
	}
}